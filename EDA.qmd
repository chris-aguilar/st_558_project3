---
title: "EDA"
author: "Chris Aguilar"
format: html
editor: visual
---

## Introduction

We'll be looking at the relationship between diabetes occurrence and several health predictors given in this [Diabetes Health Indicators Dataset](https://www.kaggle.com/datasets/alexteboul/diabetes-health-indicators-dataset/). The data comes from the Behavioral Risk Factor Surveillance System, a telephone survey collected by the CDC. We'll be using the 2015 version of the data for exploration, analysis, and machine learning.

The data contains information such as the occurrence of diabetes, various diet-related predictors (fruit/veggie consumption, alcohol), behavioral variables (exercise, smoker, doctor visits), demographic information (sex, education, income), and a few subjective variables where respondents are asked about their health.

We'll keep all variables, but be focusing on health/disease history variables, diet variables, a few behavioral variables, sex, and health insurance.

## Ingesting data

We read data in and select the variables of interest previously mentioned. The description of the data indicates that while all variables are numerically coded, only BMI, GenHlth and PhysHlth are truly numeric. The rest are categorical variables. 

However, all the categorical variables except Age, Income, Education, and General Health are binary. So we'll recategorize these four for levels that make more sense.

```{r read prep data}
library(readr)
library(dplyr)
library(stringr)

diabetes2015 <- read_csv("data/diabetes_binary_health_indicators_BRFSS2015.csv")

# helper function to extract level code and level translation
getLevels <- function(x, value_name = "value") {
  # grabbing digits at beginning of string
  index <- str_extract(x, "^\\d{1,2}") |> as.integer()
  # Grabbing everything that starts with a letter onwards
  value <- str_extract(x, "[A-Za-z](.+)")
  # putting index and value into data frame for joining later
  res <- data.frame(index = index)
  res[[value_name]] <- value
  res
}

# factor levels to use for some vars, obtained from discussion section using readClipboard()
ages <- c("1 Age 18 to 24", "2 Age 25 to 29", "3 Age 30 to 34", "4 Age 35 to 39", 
"5 Age 40 to 44", "6 Age 45 to 49", "7 Age 50 to 54", "8 Age 55 to 59", 
"9 Age 60 to 64", "10 Age 65 to 69", "11 Age 70 to 74", "12 Age 75 to 79", 
"13 Age 80 or older")

edu <- c("1 Never attended school or only kindergarten", "2 Grades 1 through 8 (Elementary)", 
"3 Grades 9 through 11 (Some high school)", "4 Grade 12 or GED (High school graduate)", 
"5 College 1 year to 3 years (Some college or technical school)", 
"6 College 4 years or more (College graduate)")

income <- c("1 Less than $10,000", "2 Less than $15,000 ($10,000 to less than $15,000)", 
"3 Less than $20,000 ($15,000 to less than $20,000)", "4 Less than $25,000 ($20,000 to less than $25,000)", 
"5 Less than $35,000 ($25,000 to less than $35,000)", "6 Less than $50,000 ($35,000 to less than $50,000)", 
"7 Less than $75,000 ($50,000 to less than $75,000)", "8 More than $75,000"
)

gen_health <- c("1 excellent", "2 very good", "3 good", "4 fair", "5 poor")

# reference tables
age_table <- getLevels(ages, "age_levels")
edu_table <- getLevels(edu, "edu_levels")
income_table <- getLevels(income, "inc_levels")
gen_health_table <- getLevels(gen_health, "health_levels")

# Grabbing diabetes data, joining translated categorical variables, and dropping redundant default variables
diabetes2015 <- diabetes2015 |>
  left_join(age_table, by = join_by(Age == index)) |>
  left_join(edu_table, by = join_by(Education == index)) |>
  left_join(income_table, by = join_by(Income == index)) |>
  left_join(gen_health_table, by = join_by(GenHlth == index)) |>
  select(-Age, -Education, -Income, -GenHlth) |> # dropping baseline variables
  mutate(Diabetes_binary = ifelse(Diabetes_binary == 1, "yes", "no")) |>
  mutate(across(where(is.character), factor)) # making the relevant variables factors
```

## EDA

We've cleaned up some categorical variables to have more legible levels, and left the others as-is as we consider the indicator values self-explanatory: 0 if false, 1 if true. If the variable is not binary, then it is considered truly quantitative.

We now do some quick explorations of the data. We first check for any NAs. Also, since `Diabetes_binary` is our response variable of interest, we'll start EDA with that variable.

```{r response eda}

# check NA
diabetes2015 |> anyNA()

# check distribution
diabetes2015 |> 
  count(Diabetes_binary) |>
  mutate(prop = n / sum(n))
  
```

`Diabetes_binary` is binary, as the name suggests, and the prevalence of diabetes in this data set is about 14%, so we exhibit some class imbalance we'll keep in mind for any modeling.

